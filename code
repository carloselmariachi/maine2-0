<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Desafío Mensual Seguridad TI</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Un gris claro para el fondo */
        }
        /* Estilos para los radio buttons personalizados */
        input[type='radio']:checked + label span {
            background-color: #6366f1; /* Indigo 500 */
            border-color: #6366f1;
        }
        input[type='radio']:checked + label span svg {
            display: block;
        }
        /* Estilos para feedback de respuestas */
        .correct-answer-feedback {
            background-color: #d1fae5; /* Green 100 */
            border-color: #34d399; /* Green 400 */
        }
        .incorrect-answer-feedback {
            background-color: #fee2e2; /* Red 100 */
            border-color: #ef4444; /* Red 400 */
        }
        .correct-text {
            color: #10b981; /* Green 600 */
        }
        .incorrect-text {
            color: #ef4444; /* Red 500 */
        }
        /* Estilos para el mensaje global */
        .message-box {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            font-size: 0.875rem;
            z-index: 50;
            transform: translateY(100%);
            opacity: 0;
            transition: all 0.3s ease-out;
            display: flex;
            align-items: center;
            justify-content: space-between;
            min-width: 200px;
        }
        .message-box.hidden {
            transform: translateY(100%);
            opacity: 0;
        }
        .message-box.show {
            transform: translateY(0);
            opacity: 1;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-2xl border border-gray-200">
        <p id="userIdDisplay" class="text-sm text-gray-500 text-right mb-4">ID de Usuario: Cargando...</p>
        <h1 class="text-3xl font-bold text-center text-indigo-700 mb-4 flex items-center justify-center gap-2">
            🔐 Desafío Mensual de Seguridad TI 🚀
        </h1>
        <p class="text-center text-gray-600 mb-6">
            ¡Prepárate para un reto divertido y blinda tu información con el Mini-Reto: "¡Evita Bloqueos Innecesarios!" 🛡️
        </p>

        <!-- Pantalla de Inicio -->
        <div id="startScreen" class="text-center">
            <p class="text-lg text-gray-700 mb-4">
                ¿Crees que sabes todo sobre cómo proteger tus cuentas? ¡Demuéstralo y conviértete en nuestro héroe de la seguridad! 🦸‍♂️🦸‍♀️
            </p>
            <div class="mb-6">
                <label for="userNameInput" class="block text-gray-700 text-sm font-bold mb-2">Tu Nombre/Apodo (para tu perfil):</label>
                <input type="text" id="userNameInput" placeholder="Ej: Agente Secreto 007" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-indigo-500 transition-colors duration-200" maxlength="30">
            </div>
            <p class="text-lg text-gray-700 mb-6">
                ¡Cada respuesta correcta te acerca más a una cuenta súper segura! 🔒😎
            </p>
            <button id="startButton" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105">
                ¡Que Comience la Aventura! �🎮
            </button>
        </div>

        <!-- Contenedor de Preguntas (oculto inicialmente) -->
        <div id="questionContainer" class="hidden space-y-6">
            <div id="questionArea" class="bg-gray-50 p-5 rounded-lg border border-gray-100">
                <!-- La pregunta y opciones se cargarán aquí -->
            </div>
            <div id="feedbackArea" class="mt-4 p-3 text-center text-base font-semibold rounded-lg hidden">
                <!-- Feedback instantáneo de respuesta -->
            </div>
            <div id="explanationArea" class="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200 text-blue-800 hidden">
                <p class="font-semibold mb-2">✨ Aprendamos más:</p>
                <p id="explanationText"></p>
                <p id="explanationLoading" class="text-center hidden">Cargando explicación... ⏳</p>
            </div>
            <div class="flex flex-col sm:flex-row gap-4 mt-6">
                <button id="checkAnswerButton" class="w-full sm:w-1/2 bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105">
                    ¡A Ver si Adivinas! 🤔💡
                </button>
                <button id="learnMoreButton" class="w-full sm:w-1/2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105 hidden">
                    ✨ Aprende Más ✨
                </button>
            </div>
            <button id="nextButton" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105 hidden mt-4">
                ¡Siguiente Reto! 💪🔥
            </button>
        </div>

        <!-- Pantalla de Resultados (oculto inicialmente) -->
        <div id="resultsScreen" class="hidden text-center">
            <h2 class="text-2xl font-bold text-indigo-700 mb-4">¡Misión Completada! 🎉🥳</h2>
            <p id="finalScore" class="text-xl text-gray-800 mb-4"></p>
            <p id="finalMessage" class="text-lg text-gray-700 mb-6"></p>
            <button id="restartButton" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105">
                ¡Jugar Otra Vez! 🎮🔁
            </button>
        </div>
    </div>

    <!-- Global Message Box -->
    <div id="globalMessageBox" class="message-box hidden bg-blue-100 border-blue-400 text-blue-700">
        <span id="messageBoxText"></span>
        <button id="messageBoxClose" class="ml-4 text-blue-700 hover:opacity-75 focus:outline-none">
            <svg class="w-4 h-4 fill-current" viewBox="0 0 20 20">
                <path d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" fill-rule="evenodd"></path>
            </svg>
        </button>
    </div>

    <script type="module">
        // Importa las funciones necesarias de Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Variables globales proporcionadas por el entorno de Canvas
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let db;
        let auth;
        let currentUserId = '';
        let userName = 'Invitado'; // Nombre de usuario predeterminado

        // Función global para mostrar mensajes (reemplaza alert())
        function showMessageBox(message, type = 'info') {
            const messageBox = document.getElementById('globalMessageBox');
            const messageText = document.getElementById('messageBoxText');
            const closeButton = document.getElementById('messageBoxClose');

            if (!messageBox || !messageText || !closeButton) {
                console.error("Los elementos del cuadro de mensaje no se encontraron.");
                return;
            }

            messageText.textContent = message;
            messageBox.classList.remove('hidden', 'bg-blue-100', 'border-blue-400', 'text-blue-700', 'bg-green-100', 'border-green-400', 'text-green-700', 'bg-red-100', 'border-red-400', 'text-red-700', 'bg-yellow-100', 'border-yellow-400', 'text-yellow-700');
            messageBox.classList.add('show'); // Clase para mostrar con transición

            if (type === 'success') {
                messageBox.classList.add('bg-green-100', 'border-green-400', 'text-green-700');
            } else if (type === 'error') {
                messageBox.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
            } else if (type === 'warning') {
                messageBox.classList.add('bg-yellow-100', 'border-yellow-400', 'text-yellow-700');
            } else { // info
                messageBox.classList.add('bg-blue-100', 'border-blue-400', 'text-blue-700');
            }

            // Ocultar después de 5 segundos
            setTimeout(() => {
                messageBox.classList.remove('show');
                messageBox.classList.add('hidden'); // Ocultar después de la transición
            }, 5000);

            closeButton.onclick = () => {
                messageBox.classList.remove('show');
                messageBox.classList.add('hidden');
            };
        }

        // Inicializar Firebase y manejar la autenticación
        if (firebaseConfig) {
            app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    currentUserId = user.uid;
                    document.getElementById('userIdDisplay').textContent = `ID de Usuario: ${currentUserId}`;
                } else {
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                        } else {
                            await signInAnonymously(auth);
                        }
                        currentUserId = auth.currentUser.uid;
                        document.getElementById('userIdDisplay').textContent = `ID de Usuario: ${currentUserId}`;
                    } catch (error) {
                        console.error("Error durante la autenticación:", error);
                        showMessageBox("Error al iniciar sesión. Algunas funciones podrían no estar disponibles.", "error");
                        // Generar un ID aleatorio si la autenticación falla para permitir funcionalidad local
                        currentUserId = crypto.randomUUID();
                        document.getElementById('userIdDisplay').textContent = `ID de Usuario (Temporal): ${currentUserId}`;
                    }
                }
            });
        } else {
            console.warn("Configuración de Firebase no encontrada. Ejecutando en modo sin persistencia de datos.");
            currentUserId = crypto.randomUUID(); // Fallback para userId
            document.getElementById('userIdDisplay').textContent = `ID de Usuario (Temporal): ${currentUserId}`;
            showMessageBox("Configuración de Firebase no encontrada. Los resultados no se guardarán.", "warning");
        }

        // Función para guardar el resultado en Firestore
        async function saveResult(score, userName) {
            if (!db || !currentUserId) {
                console.error("Firestore o User ID no disponibles para guardar resultados.");
                showMessageBox("Error al guardar: Las funciones de guardado no están activas. Intenta recargar la página.", "error");
                return;
            }

            try {
                // Ruta para los datos privados del usuario
                const resultsCollectionRef = collection(db, `artifacts/${appId}/users/${currentUserId}/trivia_results`);
                await addDoc(resultsCollectionRef, {
                    userName: userName,
                    score: score,
                    timestamp: serverTimestamp() // Marca de tiempo del servidor
                });
                showMessageBox("¡Tu resultado ha sido guardado en tu perfil! 🎉", "success");
            } catch (e) {
                console.error("Error al guardar el documento: ", e);
                showMessageBox("Error al guardar tu resultado. Por favor, intenta de nuevo.", "error");
            }
        }

        // Array de objetos para almacenar las preguntas, opciones y respuestas correctas
        const questions = [
            {
                question: 'Imagina que tu contraseña es un superhéroe. ¿Cada cuánto tiempo debería cambiar su traje para seguir siendo invencible ante los villanos cibernéticos? 🦸‍♂️',
                options: {
                    a: 'Cada 3 meses (¡Demasiado tiempo para el mismo traje! 😴)',
                    b: 'Cada 45 días (¡Frecuencia perfecta para un cambio de look y seguridad! ✨)',
                    c: 'Cada 30 días (¡Un poco exagerado, ni Superman cambia tan rápido! 💨)'
                },
                correct: 'b'
            },
            {
                question: 'Si creas una contraseña más débil que un fideo mojado, ¿qué podría pasarle a tu información? ¡Elije la opción más dramática pero real! 🍜',
                options: {
                    a: 'Nada, tu memoria es tu mejor seguridad, ¿verdad? 🤔',
                    b: '¡Alerta, alerta! Tu cuenta será una piñata para ciberataques y fraudes. 😱💥',
                    c: 'Tu cuenta hará un "ghosting" y se inactivará automáticamente. 👻'
                },
                correct: 'b'
            },
            {
                question: 'De estas "tentaciones", ¿cuál es un imán para los problemas de seguridad? ¡Cuidado, que el diablo está en los detalles! 😈',
                options: {
                    a: 'Dejar tu compu desbloqueada mientras vas por el café (¡Pista: es como dejar tu cartera abierta! 💸)',
                    b: 'Usar contraseñas tipo "123456" o "contraseña" (¡Pista: los hackers se ríen de esto! 😂)',
                    c: 'Todas las anteriores (¡Bingo! Son la combinación perfecta para un desastre digital 🚨)'
                },
                correct: 'c'
            },
            {
                question: '¡Vacaciones a la vista! 🌴 Antes de relajarte en la playa, ¿cuál es el movimiento de seguridad más inteligente para tu ausencia? (No vale dejarle tu contraseña al loro). 🦜',
                options: {
                    a: 'Dejar todas tus contraseñas guardadas para un "acceso remoto de emergencia" (¡ERROR 404: Seguridad no encontrada! ⛔)',
                    b: 'Reportar tu ausencia a tu jefe y Gestión Humana, asegurándote de que NADIE acceda sin permiso (¡Muy bien, futuro vacacionista seguro! ✅)',
                    c: 'No cambiar nada, ¡las cuentas son como los bonsáis, se cuidan solas! (¡No, no y NO! 🙅‍♀️)'
                },
                correct: 'b'
            }
        ];

        // Elementos del DOM
        const startScreen = document.getElementById('startScreen');
        const startButton = document.getElementById('startButton');
        const userNameInput = document.getElementById('userNameInput'); // Nuevo: Input de nombre de usuario
        const questionContainer = document.getElementById('questionContainer');
        const questionArea = document.getElementById('questionArea');
        const feedbackArea = document.getElementById('feedbackArea');
        const nextButton = document.getElementById('nextButton');
        const checkAnswerButton = document.getElementById('checkAnswerButton');
        const learnMoreButton = document.getElementById('learnMoreButton'); // Nuevo: Botón "Aprende Más"
        const explanationArea = document.getElementById('explanationArea'); // Nuevo: Área para la explicación
        const explanationText = document.getElementById('explanationText'); // Nuevo: Contenedor del texto de explicación
        const explanationLoading = document.getElementById('explanationLoading'); // Nuevo: Indicador de carga para la explicación
        const resultsScreen = document.getElementById('resultsScreen');
        const finalScoreElement = document.getElementById('finalScore');
        const finalMessageElement = document.getElementById('finalMessage');
        const restartButton = document.getElementById('restartButton');
        const userIdDisplay = document.getElementById('userIdDisplay'); // Para mostrar el ID de usuario

        // Variables de estado de la trivia
        let currentQuestionIndex = 0;
        let score = 0;
        let userAnswers = []; // Para almacenar las respuestas del usuario

        // Función para iniciar la trivia
        function startTrivia() {
            userName = userNameInput.value.trim(); // Obtener el nombre del usuario
            if (userName === '') {
                userName = 'Invitado'; // Si no ingresa nombre, usa "Invitado"
            }

            startScreen.classList.add('hidden');
            questionContainer.classList.remove('hidden');
            resultsScreen.classList.add('hidden');
            currentQuestionIndex = 0;
            score = 0;
            userAnswers = [];
            displayQuestion();
        }

        // Función para mostrar la pregunta actual
        function displayQuestion() {
            // Limpiar área de la pregunta, feedback y ocultar botón siguiente
            questionArea.innerHTML = '';
            feedbackArea.classList.add('hidden');
            nextButton.classList.add('hidden');
            checkAnswerButton.classList.remove('hidden');
            learnMoreButton.classList.add('hidden'); // Ocultar botón "Aprende Más" al inicio de cada pregunta
            explanationArea.classList.add('hidden'); // Ocultar el área de explicación

            const q = questions[currentQuestionIndex];
            // Crear el HTML para la pregunta y sus opciones
            const questionHtml = `
                <p class="font-semibold text-lg text-gray-800 mb-3">
                    ${currentQuestionIndex + 1}. ${q.question}
                </p>
                <div class="space-y-3" id="optionsContainer">
                    ${Object.entries(q.options).map(([key, value]) => `
                        <label class="flex items-center text-gray-700 cursor-pointer p-2 rounded-md hover:bg-gray-100 transition-colors duration-200">
                            <input type="radio" name="currentQuestion" value="${key}" class="hidden" data-key="${key}">
                            <span class="w-5 h-5 border border-gray-300 rounded-full flex items-center justify-center mr-2 transition-all duration-200">
                                <svg class="hidden w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                </svg>
                            </span>
                            ${key.toUpperCase()}) ${value}
                        </label>
                    `).join('')}
                </div>
            `;
            questionArea.innerHTML = questionHtml;

            // Reiniciar clases de feedback para las opciones
            const optionLabels = questionArea.querySelectorAll('label');
            optionLabels.forEach(label => {
                label.classList.remove('correct-answer-feedback', 'incorrect-answer-feedback');
                label.style.pointerEvents = 'auto'; // Habilitar clics
            });
        }

        // Función para verificar la respuesta seleccionada
        function checkAnswer() {
            const selectedOption = document.querySelector('input[name="currentQuestion"]:checked');
            const currentQ = questions[currentQuestionIndex];
            const optionsContainer = document.getElementById('optionsContainer');

            // Si no hay opción seleccionada
            if (!selectedOption) {
                showMessageBox('¡Por favor, selecciona una opción antes de verificar! 🧐', 'warning');
                return;
            }

            // Deshabilitar clics en las opciones una vez respondido
            const optionLabels = optionsContainer.querySelectorAll('label');
            optionLabels.forEach(label => {
                label.style.pointerEvents = 'none';
            });

            // Mostrar feedback visual y de texto
            const selectedLabel = selectedOption.closest('label');
            if (selectedOption.value === currentQ.correct) {
                score++;
                userAnswers[currentQuestionIndex] = true; // Respuesta correcta
                feedbackArea.textContent = '¡Correcto! 👍 ¡Así se hace, campeón/a de la seguridad! 🎉';
                feedbackArea.classList.remove('hidden', 'bg-red-100', 'text-red-800', 'bg-yellow-100', 'text-yellow-800');
                feedbackArea.classList.add('bg-green-100', 'text-green-800');
                selectedLabel.classList.add('correct-answer-feedback');
            } else {
                userAnswers[currentQuestionIndex] = false; // Respuesta incorrecta
                feedbackArea.textContent = `¡Ups! Esa no era... 🙁 La respuesta correcta era la opción ${currentQ.correct.toUpperCase()}. ¡A seguir aprendiendo! 💪`;
                feedbackArea.classList.remove('hidden', 'bg-green-100', 'text-green-800', 'bg-yellow-100', 'text-yellow-800');
                feedbackArea.classList.add('bg-red-100', 'text-red-800');
                selectedLabel.classList.add('incorrect-answer-feedback');

                // Resaltar la respuesta correcta si fue incorrecta
                const correctOptionLabel = document.querySelector(`input[name="currentQuestion"][value="${currentQ.correct}"]`).closest('label');
                if (correctOptionLabel) {
                    correctOptionLabel.classList.add('correct-answer-feedback');
                }
            }

            // Mostrar botón "Siguiente" y "Aprende Más"
            nextButton.classList.remove('hidden');
            learnMoreButton.classList.remove('hidden'); // Mostrar botón "Aprende Más"
            checkAnswerButton.classList.add('hidden');
            feedbackArea.classList.remove('hidden'); // Asegurarse de que el área de feedback sea visible
        }

        // Función para obtener una explicación de la pregunta usando Gemini API
        async function getExplanation() {
            explanationArea.classList.remove('hidden');
            explanationText.textContent = ''; // Limpiar explicación anterior
            explanationLoading.classList.remove('hidden'); // Mostrar indicador de carga

            const currentQ = questions[currentQuestionIndex];
            const correctOptionKey = currentQ.correct;
            const correctOptionValue = currentQ.options[correctOptionKey];

            const prompt = `Dado la siguiente pregunta de seguridad TI: '${currentQ.question}'. La respuesta correcta es la opción '${correctOptionKey.toUpperCase()}) ${correctOptionValue}'. Genera una explicación concisa y educativa sobre este concepto de seguridad, como si estuvieras enseñando a alguien de forma amigable y profesional. La explicación debe ser de aproximadamente 3-5 oraciones.`;

            let chatHistory = [];
            chatHistory.push({ role: "user", parts: [{ text: prompt }] });
            const payload = { contents: chatHistory };
            const apiKey = ""; // Canvas will automatically provide it in runtime
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    explanationText.textContent = text;
                } else {
                    explanationText.textContent = 'No se pudo generar una explicación. Inténtalo de nuevo.';
                    console.error('Estructura de respuesta inesperada del LLM:', result);
                }
            } catch (error) {
                console.error('Error al llamar a la API de Gemini:', error);
                explanationText.textContent = 'Hubo un error al obtener la explicación. Por favor, verifica tu conexión.';
                showMessageBox('Error al conectar con el servicio de IA.', 'error');
            } finally {
                explanationLoading.classList.add('hidden'); // Ocultar indicador de carga
            }
        }

        // Función para avanzar a la siguiente pregunta o mostrar resultados
        function nextQuestion() {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                displayQuestion();
            } else {
                showResults();
            }
        }

        // Función para mostrar la pantalla de resultados
        function showResults() {
            questionContainer.classList.add('hidden');
            resultsScreen.classList.remove('hidden');

            finalScoreElement.textContent = `¡Lograste ${score} de ${questions.length} respuestas correctas! 🎯`;

            // Mensaje final basado en el rendimiento
            if (score === questions.length) {
                finalMessageElement.textContent = '¡Impresionante! ¡Has respondido todas las preguntas como un verdadero gurú de la seguridad TI! ¡Un aplauso para ti! 🥳🏆';
                finalMessageElement.classList.add('correct-text');
                finalMessageElement.classList.remove('incorrect-text');
            } else if (score >= questions.length / 2) {
                finalMessageElement.textContent = '¡Buen trabajo! Estás en el camino de ser un campeón de la seguridad TI. ¡Sigue así y a conquistar el ciberespacio! 😉🚀';
                finalMessageElement.classList.remove('correct-text', 'incorrect-text');
            } else {
                finalMessageElement.textContent = '¡No te desanimes! Cada error es un paso más para aprender y protegerte mejor. ¡Sigue practicando y serás un experto! 💪📚';
                finalMessageElement.classList.add('incorrect-text');
                finalMessageElement.classList.remove('correct-text');
            }

            // Guardar el resultado en Firestore
            saveResult(score, userName);
        }

        // Event Listeners
        startButton.addEventListener('click', startTrivia);
        checkAnswerButton.addEventListener('click', checkAnswer);
        nextButton.addEventListener('click', nextQuestion);
        learnMoreButton.addEventListener('click', getExplanation); // Nuevo: Evento para el botón "Aprende Más"
        restartButton.addEventListener('click', startTrivia);

        // Inicializar mostrando la pantalla de inicio y esperando la autenticación
        window.onload = function() {
            startScreen.classList.remove('hidden');
            questionContainer.classList.add('hidden');
            resultsScreen.classList.add('hidden');
            // La visualización del userId se actualizará una vez que la autenticación esté lista.
        };
    </script>
</body>
</html>
